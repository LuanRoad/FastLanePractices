fastlane_version "2.28.3"

default_platform :ios

platform :ios do

    lane :getTeamNames do
        require "spaceship" 
        clientTunes = Spaceship::Tunes.login(ENV["APPLE_ID"], ENV["FASTLANE_PASSWORD"])
        client = Spaceship::Portal.login(ENV["APPLE_ID"] ,ENV["FASTLANE_PASSWORD"])
      
        UI.message "* Developer Portal Team ID:"
        strDevPortal = "" 
        client.teams.each do |team|
            UI.message "#{team['name']} (#{team['teamId']})"
            strDevPortal << "#{team['name']} (#{team['teamId']})||"
        end

        UI.message "* App Store Connect Team ID:"
        strClientTunes = "" 
        clientTunes.teams.each do |team|
            UI.message "#{team['contentProvider']['name']} (#{team['contentProvider']['contentProviderId']})"
            strClientTunes << "#{team['contentProvider']['name']} (#{team['contentProvider']['contentProviderId']})||"
        end 
    end
    
    lane :create_keys do
      match(type: "development", force_for_new_devices: true)
      match(type: "adhoc", force_for_new_devices: true)
      match(type: "appstore")
    end

    desc "Download keys"
    lane :download_keys do
      match(type: "development", readonly: true)
      match(type: "adhoc", readonly: true)
      match(type: "appstore", readonly: true)
    end

    desc "Build Ad Hoc"
    lane :buildAdHoc do

        match(type: "adhoc", readonly: true)

        cocoapods

        build_app(
            workspace: ENV["XCODE_WORKSPACE"],
            scheme: ENV["XCODE_SCHEME"],
            configuration: ENV["XCODE_CONFIGURATION"]
        )
    end

    desc "Build"
    lane :build do

        match(type: "appstore", readonly: true)

        cocoapods
        
        build_app(
            workspace: ENV["XCODE_WORKSPACE"],
            scheme: ENV["XCODE_SCHEME"]
        )
    end

    desc "App Center"
    lane :app_center do
    

       inc
       
       buildAdHoc

       # https://github.com/microsoft/fastlane-plugin-appcenter
       # bundle exec fastlane add_plugin appcenter
       appcenter_upload(
          api_token: ENV["APP_CENTER_API_TOKEN"],
          owner_name: ENV["APP_CENTER_OWNER_NAME"],
          owner_type: ENV["APP_CENTER_OWNER_TYPE"],
          app_name: ENV["APP_CENTER_APP_NAME"],
          notify_testers: true,
          destinations: ENV["APP_CENTER_DESTINATIONS"],
          release_notes: "appcenter!",
          file: lane_context[SharedValues::IPA_OUTPUT_PATH]
        )
    end
    
    desc "Deploy to Firebase Distribution"
    lane :firebase do
    
        inc

        buildAdHoc

        # https://firebase.google.com/docs/app-distribution/ios/distribute-fastlane
        # bundle exec fastlane add_plugin firebase_app_distribution
        firebase_app_distribution(
            app: ENV["FIREBASE_APP_ID"],
            testers: ENV["FIREBASE_TESTERS"],
            groups: ENV["FIREBASE_TEST_GROUP"],
            ipa_path: lane_context[SharedValues::IPA_OUTPUT_PATH],
            release_notes_file: "fastlane/release_notes.txt",
            service_credentials_file: ENV["FIREBASE_DIST_SERVICE_ACCOUNT_FILE"]
        )
    end

    desc "Upload to Test Flight"
    lane :tf do
    
        inc
    
        build

        # https://docs.fastlane.tools/actions/upload_to_testflight
        upload_to_testflight(
            skip_waiting_for_build_processing: true,
            apple_id: ENV["APP_STORE_CONNECT_APPLE_ID"]
        )
    end

    desc "Upload to Test Flight - External"
    lane :tf_external do

        build

        # https://docs.fastlane.tools/actions/upload_to_testflight
        upload_to_testflight(
            changelog: "external!",
            distribute_external: true,
            notify_external_testers: true,
            groups: [
                "External"
            ],
        )
    end
    
    desc "Increment Build Number"
    lane :inc do
    
        increment_build_number({
          build_number: latest_testflight_build_number + 1
        }) 
    end

    desc "Incrementando Numero de version Automaticamente"
    lane :incVersionAuto do
        # Esta no jala -> increment_version_number
        increment_version_number_in_xcodeproj(bump_type: "patch", target: "HelloiOS")
    end
    

    desc "Get Cert for development"
    lane :getDevCert do
        get_certificates(
        development: true,
        username: ENV["APPLE_ID"]
        )
    end

    desc "Get Cert for distribution"
    lane :getDisCert do
        get_certificates(
        username: ENV["APPLE_ID"]
        )
    end

    desc "Create a type cert"
    lane :CreateCert do
        #type: specify type cert
        match(type: "development")
        # cert type: development
    end

    desc "Gets provisionilg profiles development with sigh"
    lane :getProvisioningProfileDev do
        get_provisioning_profile(
            development: true,
            username: ENV["APPLE_ID"]
        )
    end


    desc "Gets provisionilg profiles AdHoc with sigh"
    lane :getProvisioningProfileAdHoc do
        get_provisioning_profile(
            adhoc: true,
            username: ENV["APPLE_ID"]
        )
    end
end
